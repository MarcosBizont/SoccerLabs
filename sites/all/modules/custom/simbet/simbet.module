<?php

define("N_BETS_BY_DAY", 5);	
	
/**
 * Implements hook_cronapi().
 */
function simbet_cronapi() {
  $items = array();
  $items['simbet_close_simbets'] = array();
  
  return $items;
}


function simbet_simulate_bet($form, &$form_state) 
{
	module_load_include('inc', 'tips', 'tips_tipfin_odds_library');
	
	$idmatch = 0;
	if(isset($_GET['field_match_simbet'])) $idmatch = intval($_GET['field_match_simbet']);
	if(isset($form_state['values']['match'])) $idmatch = intval($form_state['values']['match']);
	if($idmatch==0) return '';
	
	$node_match = node_load($idmatch);
	
	$form = array();
	$form['match'] = array('#type' => 'hidden', '#value' => $idmatch);
	
	// Tip type options available
	$query = new EntityFieldQuery();
	$query->entityCondition('entity_type', 'taxonomy_term')
		  ->entityCondition('bundle', 'tip_type')
		  ->addMetaData('account', user_load(1))
		  ->fieldCondition('field_is_available_for_custom_be', 'value', '1', '=')
		  ->propertyOrderBy('weight');
	
	$result = $query->execute();
	$result = reset($result);
	$optionstoallow = array('0' => t('Select type of bet'));
	foreach($result as &$term) 
	{
		$term = taxonomy_term_load($term->tid);
		$optionstoallow[$term->tid] = $term->name;
	}
	
	$tiptypekeys = array_keys($optionstoallow);
	array_shift($tiptypekeys);
	$oddsavailable = tips_tipfin_odds_library_check_odds_for_match($idmatch, $tiptypekeys);
	foreach($optionstoallow as $key => $value)
		if(!isset($oddsavailable[$key]) && $key != 0)
			unset($optionstoallow[$key]);
	
	$form['bettype'] = array(
	   '#type' => 'select',
	   '#title' => t('Bet type'),
	   '#options' => $optionstoallow,
	   '#ajax' => array(
	      'callback' => 'simbet_simulate_bet_callback',
		  'wrapper' => 'form-wrapper-simbetcustom',
	   ),
	   '#default_value' => ''
	);
	
	
	$form['bet_container'] = array(
		'#prefix' => '<div id="form-wrapper-simbetcustom">',
		'#suffix' => '</div>',
		'#type' => 'fieldset',
	);
	
	
	$noteam = false;
	if(isset($form_state['values']['bettype']))
		if(intval($form_state['values']['bettype'])>0)
			if(in_array($form_state['values']['bettype'], array(832,674)))
			{
				$node_local_team = node_load($node_match->field_local_team[LANGUAGE_NONE][0]['target_id']);
				$node_visitor_team = node_load($node_match->field_visitor_team[LANGUAGE_NONE][0]['target_id']);
				$form['bet_container']['team'] = array(
				   '#type' => 'select',
				   '#title' => t('Team'),
				   '#options' => array(
				      0 => t('Select the team'),
					  $node_local_team->nid => $node_local_team->title,
					  $node_visitor_team->nid => $node_visitor_team->title,
				   ),
				   '#ajax' => array(
				      'callback' => 'simbet_simulate_bet_callback',
					  'wrapper' => 'form-wrapper-simbetcustom',
				   ),
				   '#default_value' => ''
				);		
			}
			else
				$noteam = true;
	
	if(isset($form_state['values']['team']) || $noteam)
		if(intval($form_state['values']['team'])>0 || $noteam)
		{
			$options[0] = t('Select a bookmaker');
			if($noteam)
			{
				foreach($oddsavailable[$form_state['values']['bettype']] as $key => $value) 
					$options[$key . ' - ' . $value] = $key . ' - ' . $value;
			}
			else
			{
				if($node_match->field_local_team[LANGUAGE_NONE][0]['target_id']==$form_state['values']['team'])	
					$idtoget = 1;
				else
					$idtoget = 2;
				foreach($oddsavailable[$form_state['values']['bettype']][$idtoget] as $key => $value) 
					$options[$key . ' - ' . $value] = $key . ' - ' . $value;
			}
			$form['bet_container']['bookmaker'] = array(
			   '#type' => 'select',
			   '#title' => t('Bookmaker'),
			   '#options' => $options,
			   '#ajax' => array(
			      'callback' => 'simbet_simulate_bet_callback',
				  'wrapper' => 'form-wrapper-simbetcustom',
			   ),
			   '#default_value' => ''
			);		
		}

	if(isset($form_state['values']['bookmaker']))
		if($form_state['values']['bookmaker']!='0')
		{
			$form['bet_container']['submit'] = array(
				'#type' => 'submit',
				'#value' => t('Simulate bet'),
				'#submit' => array('simbet_simulate_bet_submit'),
			);
		}
	
	return $form;
}

function simbet_simulate_bet_callback($form, $form_state)
{
	return $form['bet_container'];	
}

function simbet_simulate_bet_submit($form, $form_state)
{
	global $user;
	
	// ToDo : Validaciones
	
	$teamid = 0;
	if(isset($form_state['values']['team'])) 
		$teamid = $form_state['values']['team'];
	
	$bookodds = explode('-', $form_state['values']['bookmaker']);
	
	_simbet_create_simbet($user,$form_state['values']['match'],$bookodds[0],
					$teamid,$form_state['values']['bettype'],$bookodds[1]);
	
	
	
}

function simbet_form_alter(&$form, $form_state, $form_id) 
{
	module_load_include('inc', 'tips', 'tips_tipfin_odds_library');
	
	global $user;
	if($form_id=='simbet_node_form')
	{
		//if(!isset($_GET['field_match_simbet'])) drupal_foto('/');
		if(inplay_is_tipster() || $user->uid == 1)
		{
			$node_match = node_load($_GET['field_match_simbet']);
			$form['title']['#default_value'] = 'Custom bet: ' . $node_match->title;
			$form['title']['#access'] = FALSE;
			
			$query = new EntityFieldQuery();
			$query->entityCondition('entity_type', 'taxonomy_term')
				  ->entityCondition('bundle', 'tip_type')
				  ->addMetaData('account', user_load(1))
				  ->fieldCondition('field_is_available_for_custom_be', 'value', '1', '=');
			
			$result = $query->execute();
			$result = reset($result);
			$optionstoallow = array();
			foreach($result as $term) $optionstoallow[] = $term->tid;
			foreach($form['field_tip_type_simbet']['und']['#options'] as $idoption =>  $option)
				if($idoption!='_none' && !in_array($idoption, $optionstoallow)) 
					unset($form['field_tip_type_simbet']['und']['#options'][$idoption]);
			
			$form['field_win_simbet']['und']['#default_value'] = 0;
/*
			unset($form['field_win_simbet'][LANGUAGE_NONE]['#options']['_none']);
			unset($form['field_win_simbet'][LANGUAGE_NONE]['#options'][1]);
			unset($form['field_win_simbet'][LANGUAGE_NONE]['#options'][2]);
			unset($form['field_win_simbet'][LANGUAGE_NONE]['#options'][3]);
			
*/
			$form['field_win_simbet']['#access'] = FALSE;
			
			$form['field_stake_simbet'][LANGUAGE_NONE][0]['value']['#type'] = 'select';
			$form['field_stake_simbet'][LANGUAGE_NONE][0]['value']['#multiple'] = FALSE;
			$form['field_stake_simbet'][LANGUAGE_NONE][0]['value']['#options'] = array(1,2,3,4,5,6,7,8,9,10);
			$form['field_stake_simbet'][LANGUAGE_NONE][0]['value']['#size'] = 1;

			// Si no es Tipster, en este caso solo el uid == 1. En caso real todos menos los tipster
			//if(!inplay_is_tipster())
			//{
				
				$tiptypekeys = array_keys($form['field_tip_type_simbet'][LANGUAGE_NONE]['#options']);
				array_shift($tiptypekeys);
				$oddsavailable 
					= tips_tipfin_odds_library_check_odds_for_match($_GET['field_match_simbet'], $tiptypekeys);
				//dpm($oddsavailable);
					
				// Tip type deben ser solamente los disponibles, si es tipster dejar que sean todos
				//foreach($form['field_tip_type_simbet'][LANGUAGE_NONE]['#options'] as $key => $value)
				//	if(!isset($oddsavailable[$key]) && $key != '_none')
				//		unset($form['field_tip_type_simbet'][LANGUAGE_NONE]['#options'][$key]);
				
				
				$form['field_tip_type_simbet'][LANGUAGE_NONE]['#ajax'] = array(
					'callback' => 'simbet_form_update_selectfield',
					'wrapper' => 'form-wrapper-simbetcustom',
				);
				$form['field_team_simbet'] = array(
			       '#type' => 'select',
			       '#title' => t('Team'),
			       '#options' => array(
			          0 => t('Local'),
					  1 => t('Visitor'),
			       ),
			       '#ajax' => array(
			          'callback' => 'simbet_form_update_selectfield',
					  'wrapper' => 'form-wrapper-simbetcustom',
			       ),
			       '#default_value' => ''
			   );
				
				// Team obtener los equipos disponibles por medio del match y solamente cuando el tip type aplique
				// $form['field_team_simbet'] = array('#type' => 'hidden', '#value' => '');
				$form['field_team_simbet']['#prefix'] = '<div id="form-wrapper-teamsimbetcustom">';
				$form['field_team_simbet']['#suffix'] = '</div>';
				
				
				//dpm($form_state);
				
				//$form['field_bookmaker_simbet'] = array('#type' => 'hidden', '#value' => '');
				$form['field_bookmaker_simbet']['#prefix'] = '<div id="form-wrapper-bookmakersimbetcustom">';
				$form['field_bookmaker_simbet']['#suffix'] = '</div>';
				
				// Esconder siempre que no sea tipster
				
				// Bookmaker se llena una vez que se llene tip type
				
				// Esconder Odds
				$form['field_odds_simbet']['#access'] = FALSE;
				
				// Odds se llena automaticamente con el tip type. Modificar texto para mostrar odds
					
			//}
			
			$form['#prefix'] = '<div id="form-wrapper-simbetcustom">';
			$form['#suffix'] = '</div>';
			
			
			//$form['field_tip_type_simbet'][LANGUAGE_NONE]['#validated'] = TRUE;
			
			 $form_state['rebuild'] = TRUE;
			//dpm($form);
			
		}
	}
}


function simbet_form_update_selectfield(&$form, &$form_state)
{
	$commands = array();
	
	//dpm('formstateajax');
	$tiptype = $form_state['values']['field_tip_type_simbet'][LANGUAGE_NONE][0]['target_id'];
	//$form['field_team_simbet'] = array('#type' => 'hidden', '#value' => '');
	
	if(in_array($tiptype, array(832,674)))
	{
		$form['field_team_simbet'] = array(
	       '#type' => 'select',
	       '#title' => t('Team'),
	       '#options' => array(
	          0 => t('Local'),
			  1 => t('Visitor'),
	       ),
	       '#default_value' => ''
	   );
	   
	}
	
	$form['field_team_simbet']['#prefix'] = '<div id="form-wrapper-teamsimbetcustom">';
	$form['field_team_simbet']['#suffix'] = '</div>';
	
	
	$form['field_bookmaker_simbet'] = array('#type' => 'hidden', '#value' => '');
	
	if(((string)$tiptype)!='')
	{
		$form['field_bookmaker_simbet'] = array(
	       '#type' => 'select',
	       '#title' => t('Bookmaker'),
	       '#options' => array(
	          0 => t('Bet'),
			  1 => t('888'),
	       ),
	       '#default_value' => ''
	   );	
	}
	
	$form['field_bookmaker_simbet']['#prefix'] = '<div id="form-wrapper-bookmakersimbetcustom">';
	$form['field_bookmaker_simbet']['#suffix'] = '</div>';
	
	
    $form_state['rebuild'] = TRUE;
    $commands[] = ajax_command_replace('#form-wrapper-teamsimbetcustom', drupal_render($form['field_team_simbet']));
	$commands[] = ajax_command_replace("#form-wrapper-bookmakersimbetcustom", drupal_render($form['field_bookmaker_simbet']));
	return array('#type' => 'ajax', '#commands' => $commands);
}
	

function simbet_close_simbets()
{
	module_load_include('inc', 'commentaries', 'commentaries_strategies');
	
	// ToDo : Select query para traer los aprtidos que ya hayan pasado 
	$query = new EntityFieldQuery();
	$query->entityCondition('entity_type', 'node')
		  ->entityCondition('bundle', 'simbet')
		  ->addMetaData('account', user_load(1))
		  ->fieldCondition('field_win_simbet', 'value', '0', '=');
	
	$result = $query->execute();
	
	if (isset($result['node'])) 
	{
		$betsids = array_keys($result['node']);
		foreach($betsids as $idbet)
		{
			$simbet = node_load($idbet);
			$match = node_load($simbet->field_match_simbet[LANGUAGE_NONE][0]['target_id']);
			if($match->field_match_status[LANGUAGE_NONE][0]['value']=='FT'
				|| $match->field_match_status[LANGUAGE_NONE][0]['value']=='Pen.')
			{
				simbet_close_simbets_bytype($simbet);
			}
			elseif($match->field_match_status[LANGUAGE_NONE][0]['value']=='Postp.')
			{
				$simbet->field_win_simbet[LANGUAGE_NONE][0]['value'] = 3;
				node_save($simbet);	
			}
			
		}
	}
	
		
}

function simbet_close_simbets_bytype($simbet)
{
	$match = node_load($simbet->field_match_simbet[LANGUAGE_NONE][0]['target_id']);
	switch($simbet->field_tip_type_simbet[LANGUAGE_NONE][0]['target_id'])
	{
		case 571:
			if($simbet->field_team_simbet[LANGUAGE_NONE][0]['target_id'] == $match->field_local_team[LANGUAGE_NONE][0]['target_id'])
				$score = $match->field_local_team_score[LANGUAGE_NONE][0]['value'];
			else
				$score = $match->field_visitor_team_score[LANGUAGE_NONE][0]['value'];
			
			if($score < 1.5) 
				$simbet->field_win_simbet[LANGUAGE_NONE][0]['value'] = 1;
			else 
				$simbet->field_win_simbet[LANGUAGE_NONE][0]['value'] = 2;
			
			node_save($simbet);
		break;
		case 572:
			if($simbet->field_team_simbet[LANGUAGE_NONE][0]['target_id'] == $match->field_local_team[LANGUAGE_NONE][0]['target_id'])
				$score = $match->field_local_team_score[LANGUAGE_NONE][0]['value'];
			else
				$score = $match->field_visitor_team_score[LANGUAGE_NONE][0]['value'];
			
			if($score > 1.5) 
				$simbet->field_win_simbet[LANGUAGE_NONE][0]['value'] = 1;
			else 
				$simbet->field_win_simbet[LANGUAGE_NONE][0]['value'] = 2;
			
			node_save($simbet);
		break;
		case 798:
			if($simbet->field_team_simbet[LANGUAGE_NONE][0]['target_id'] == $match->field_local_team[LANGUAGE_NONE][0]['target_id'])
				$score = $match->field_local_team_score[LANGUAGE_NONE][0]['value'];
			else
				$score = $match->field_visitor_team_score[LANGUAGE_NONE][0]['value'];
			
			if($score < 2.5) 
				$simbet->field_win_simbet[LANGUAGE_NONE][0]['value'] = 1;
			else 
				$simbet->field_win_simbet[LANGUAGE_NONE][0]['value'] = 2;
			
			node_save($simbet);
		break;
		case 799:
			if($simbet->field_team_simbet[LANGUAGE_NONE][0]['target_id'] == $match->field_local_team[LANGUAGE_NONE][0]['target_id'])
				$score = $match->field_local_team_score[LANGUAGE_NONE][0]['value'];
			else
				$score = $match->field_visitor_team_score[LANGUAGE_NONE][0]['value'];
			
			if($score > 2.5) 
				$simbet->field_win_simbet[LANGUAGE_NONE][0]['value'] = 1;
			else 
				$simbet->field_win_simbet[LANGUAGE_NONE][0]['value'] = 2;
			
			node_save($simbet);
		break;
		case 573:
			if($match->field_local_team_score[LANGUAGE_NONE][0]['value'] > 0 && $match->field_visitor_team_score[LANGUAGE_NONE][0]['value'] > 0) 
				$simbet->field_win_simbet[LANGUAGE_NONE][0]['value'] = 1;
			else 
				$simbet->field_win_simbet[LANGUAGE_NONE][0]['value'] = 2;
			node_save($simbet);
		break;
		
		case 578:
			if(($match->field_local_team_score[LANGUAGE_NONE][0]['value'] + $match->field_visitor_team_score[LANGUAGE_NONE][0]['value']) < 1.5) 
				$simbet->field_win_simbet[LANGUAGE_NONE][0]['value'] = 1;
			else 
				$simbet->field_win_simbet[LANGUAGE_NONE][0]['value'] = 2;
			node_save($simbet);
		break;
		case 772:
			if(($match->field_local_team_score[LANGUAGE_NONE][0]['value'] + $match->field_visitor_team_score[LANGUAGE_NONE][0]['value']) > 0.5) 
				$simbet->field_win_simbet[LANGUAGE_NONE][0]['value'] = 1;
			else 
				$simbet->field_win_simbet[LANGUAGE_NONE][0]['value'] = 2;
			node_save($simbet);
		break;
		case 773:
			if(($match->field_local_team_score[LANGUAGE_NONE][0]['value'] + $match->field_visitor_team_score[LANGUAGE_NONE][0]['value']) > 1.5) 
				$simbet->field_win_simbet[LANGUAGE_NONE][0]['value'] = 1;
			else 
				$simbet->field_win_simbet[LANGUAGE_NONE][0]['value'] = 2;
			node_save($simbet);
		break;
		case 753:
			if(($match->field_local_team_score[LANGUAGE_NONE][0]['value'] + $match->field_visitor_team_score[LANGUAGE_NONE][0]['value']) > 1.5) 
				$simbet->field_win_simbet[LANGUAGE_NONE][0]['value'] = 1;
			else 
				$simbet->field_win_simbet[LANGUAGE_NONE][0]['value'] = 2;
			node_save($simbet);
		break;
		case 576:
			if(($match->field_local_team_score[LANGUAGE_NONE][0]['value'] + $match->field_visitor_team_score[LANGUAGE_NONE][0]['value']) < 2.5) 
				$simbet->field_win_simbet[LANGUAGE_NONE][0]['value'] = 1;
			else 
				$simbet->field_win_simbet[LANGUAGE_NONE][0]['value'] = 2;
			node_save($simbet);
		break;
		case 577:
			if(($match->field_local_team_score[LANGUAGE_NONE][0]['value'] + $match->field_visitor_team_score[LANGUAGE_NONE][0]['value']) > 2.5) 
				$simbet->field_win_simbet[LANGUAGE_NONE][0]['value'] = 1;
			else 
				$simbet->field_win_simbet[LANGUAGE_NONE][0]['value'] = 2;
			node_save($simbet);
		break;
		case 754:
			if(($match->field_local_team_score[LANGUAGE_NONE][0]['value'] + $match->field_visitor_team_score[LANGUAGE_NONE][0]['value']) < 3.5) 
				$simbet->field_win_simbet[LANGUAGE_NONE][0]['value'] = 1;
			else 
				$simbet->field_win_simbet[LANGUAGE_NONE][0]['value'] = 2;
			node_save($simbet);
		break;
		case 755:
			if(($match->field_local_team_score[LANGUAGE_NONE][0]['value'] + $match->field_visitor_team_score[LANGUAGE_NONE][0]['value']) > 3.5) 
				$simbet->field_win_simbet[LANGUAGE_NONE][0]['value'] = 1;
			else 
				$simbet->field_win_simbet[LANGUAGE_NONE][0]['value'] = 2;
			node_save($simbet);
		break;
		case 575:
			if($simbet->field_team_simbet[LANGUAGE_NONE][0]['target_id'] == $match->field_local_team[LANGUAGE_NONE][0]['target_id'])
				$score = $match->field_local_team_score[LANGUAGE_NONE][0]['value'];
			else
				$score = $match->field_visitor_team_score[LANGUAGE_NONE][0]['value'];
			
			if($score == 0) 
				$simbet->field_win_simbet[LANGUAGE_NONE][0]['value'] = 1;
			else 
				$simbet->field_win_simbet[LANGUAGE_NONE][0]['value'] = 2;
			
			node_save($simbet);
		break;		
		case 787:
		case 788:
			if($match->field_local_team_score[LANGUAGE_NONE][0]['value'] == $match->field_visitor_team_score[LANGUAGE_NONE][0]['value']) 
				$simbet->field_win_simbet[LANGUAGE_NONE][0]['value'] = 1;
			else 
				$simbet->field_win_simbet[LANGUAGE_NONE][0]['value'] = 2;
			
			node_save($simbet);
		break;
		case 832:
			if($simbet->field_team_simbet[LANGUAGE_NONE][0]['target_id'] == $match->field_local_team[LANGUAGE_NONE][0]['target_id'])
			{	
				$score = $match->field_local_team_score[LANGUAGE_NONE][0]['value'];
				$scorevs = $match->field_visitor_team_score[LANGUAGE_NONE][0]['value'];
			}
			else
			{
				$score = $match->field_visitor_team_score[LANGUAGE_NONE][0]['value'];
				$scorevs = $match->field_local_team_score[LANGUAGE_NONE][0]['value'];
			}
			
			if($score > $scorevs) 
				$simbet->field_win_simbet[LANGUAGE_NONE][0]['value'] = 1;
			else 
				$simbet->field_win_simbet[LANGUAGE_NONE][0]['value'] = 2;
			
			node_save($simbet);
		break;
		
	}
				
		
}

/**
 * Implements hook_view_menu().
 */
 
 function simbet_menu(){
    
    $items['simbet/create'] = array(
		'title' => 'Display screen to simulate a bet',
		'page callback' => '_simbet_create',
		'access arguments' => array('make a simulated bet'),  
		'type' => MENU_CALLBACK
    );
    
    $items['simbet/generate'] = array(
		'title' => 'Generate bet',
		'page callback' => '_simbet_generate',
		'access arguments' => array('make a simulated bet'),  
		'type' => MENU_CALLBACK
    );
    
    $items['simulate_bet'] = array(
	    'title' => 'Simulate bet',
	    'page callback' => 'drupal_get_form',
	    'page arguments' => array('simbet_simulate_bet'),
	    'access arguments' => array('make a custom simulated bet'),
	);
  
  
	return $items;
}

function simbet_permission() {
  return array(
    'make a custom simulated bet' => array(
      'title' => t('Can make a custom simulated bet'),
      'description' => t('User with permissions to make a custom simulated bet .'),
    ),
    'make a simulated bet' => array(
      'title' => t('Can make a simulated bet'),
      'description' => t('User with permissions to make a simulated bet .'),
    ),
    'make only n simulated bet' => array(
      'title' => t('Can make a simulated bet, but only n bets'),
      'description' => t('User with permissions to make N simulated bets .'),
    ),
  );
}


function _simbet_generate()
{
	$matchid = $_GET['matchid'];
	$teamid = $_GET['teamid'];
	$odds = $_GET['odds'];
	$tipid = $_GET['tipid'];
	$bookmakername = $_GET['bookmakername'];
	
	if(!simbet_user_isvalid())
		exit();
	
	if(!simbet_bet_isvalid($matchid, $odds, $bookmakername, $teamid, $message))
		exit();
	
	// Generate bet
	global $user;
	$tip = node_load($tipid);
	$tiptype = taxonomy_term_load($tip->field_tip_type[LANGUAGE_NONE][0]['target_id']);
	
	_simbet_create_simbet($user,$matchid,$bookmakername,$teamid,$tip->field_tip_type[LANGUAGE_NONE][0]['target_id'],$odds);
	
	echo '<i class="fa fa-check-circle" ></i>';
	
	exit();
	
}

function _simbet_create_simbet($usersimbet,$matchid,$bookmakername,$teamid,$tiptypeid,$odds,$stake=1)
{
	$match = node_load($matchid);
	$term = taxonomy_get_term_by_name($bookmakername);
	$term = reset($term);
	
	$nc = new stdClass();
	$nc->type = 'simbet';
	$nc->status = 1;
	$nc->uid = $usersimbet->uid;
	$nc->title = 'Simulated bet : ' . $match->title;
	$nc->promote = 0;
	$nc->created = time();
	$nc->timestamp = $nc->created;
	$nc->changed = $nc->created;
	$nc->sticky = 0;
	$nc->revision = 0;
	$nc->language = 'und';
	
	//$tip->body[LANGUAGE_NONE][0]['value'] = $body;
	$nc->field_tip_type_simbet[LANGUAGE_NONE][0]['target_id'] = $tiptypeid;
	$nc->field_team_simbet[LANGUAGE_NONE][0]['target_id'] = $teamid;
	
	$nc->field_odds_simbet[LANGUAGE_NONE][0]['value'] = $odds;
	$nc->field_stake_simbet[LANGUAGE_NONE][0]['value'] = $stake;
	
	$nc->field_bookmaker_simbet[LANGUAGE_NONE][0]['target_id'] = $term->tid;
	$nc->field_win_simbet[LANGUAGE_NONE][0]['value'] = 0;
	$nc->field_match_simbet[LANGUAGE_NONE][0]['target_id'] = $matchid;
	
	node_save($nc);
}


function _simbet_create()
{
	$matchid = $_GET['matchid'];
	$teamid = $_GET['teamid'];
	$odds = $_GET['odds'];
	$tipid = $_GET['tipid'];
	$bookmakername = $_GET['bookmakername'];
	$tip = node_load($tipid);
	$tiptype = taxonomy_term_load($tip->field_tip_type[LANGUAGE_NONE][0]['target_id']);
	
	if(!simbet_user_isvalid())
	{
		echo t('We have tips here waiting for you, please consider <a href="/en/be-member">be a member</a> and enjoy all the fun all the time');
		exit();
	}
	
	if(!simbet_bet_isvalid($matchid, $odds, $bookmakername, $teamid, $message))
	{
		echo $message;
		exit();
	}
	if(!simbet_bet_isvalid_in_confirmation($matchid, $odds, $bookmakername, $teamid,
				$tip->field_tip_type[LANGUAGE_NONE][0]['target_id'], $message))
	{
		echo $message;
		exit();
	}
	
	$matchnode = node_load($matchid);
	$local_team = node_load($matchnode->field_local_team[LANGUAGE_NONE][0]['target_id']);
	$visitor_team = node_load($matchnode->field_visitor_team[LANGUAGE_NONE][0]['target_id']);
	$matchname = $local_team->title . ' - ' . $visitor_team->title;
	$team = node_load($tip->field_team[LANGUAGE_NONE][0]['target_id']);
	
	// $teamid
	if(intval($teamid) > 0)
		echo t("Are you sure you want to bet <strong>@tiptypename</strong> for <strong>@teamname</strong> in <strong>@matchname</strong>?<br/> Odds: <strong>@odds</strong>", 
					array('@tiptypename' => $tiptype->name, '@teamname' => $team->title, 
							'@matchname' => $matchname, '@odds' => $bookmakername . ' | ' . $odds));
	else
		echo t("Are you sure you want to bet <strong>@tiptypename</strong> in <strong>@matchname</strong>?<br/> Odds: <strong>@odds</strong>", 
					array('@tiptypename' => $tiptype->name, 
							'@matchname' => $matchname, '@odds' => $bookmakername . ' | ' . $odds));
		
	
	$params['matchid'] = $matchid;
	$params['teamid'] = $teamid;
	$params['tipid'] = $tipid;
	$params['odds'] = $odds;
	$params['bookmakername'] = $bookmakername;
	
	
	$urltobet = url('simbet/generate', array('query' => $params));
	echo '<a href="#' . $matchid . '"  class="simbetaccept" url="' . $urltobet . '" >' . t('Yes') . '</a>';
	
						
	exit();
}


/*
	Simulate bets
	
*/
function simbet_format_list_offers($obj, $odds_suggested, $tip)
{
	$teamid = $tip->field_team[LANGUAGE_NONE][0]['target_id'];
	$matchid = $tip->field_match[LANGUAGE_NONE][0]['target_id'];
	$message = '';
	$is_bet_valid = simbet_bet_isvalid($matchid, $odds_suggested, $teamid, $message);
	$is_user_valid = simbet_user_isvalid();
	
	$odd = array();
	foreach ($obj as $key => $row)
	{
	    $odd[$key] = $row['odd'];
	}
	array_multisort($odd, SORT_DESC, $obj);
	
	foreach($obj as $value) 
	{
		$prelink = '';
		$postlink = '';
		if($is_bet_valid && $is_user_valid)
		{
			// Add link to callback to print bet option
			$params['matchid'] = $matchid;
			$params['teamid'] = $teamid;
			$params['tipid'] = $tip->nid;
			$params['odds'] = $value['odd'];
			$params['bookmakername'] = $value['bookmakername'];
			
			$urltobet = url('simbet/create', array('query' => $params));
			$prelink = '<a href="#' . $matchid . '"  class="simbetpopover" url="' . $urltobet . '" >';
			$postlink = '</a>';
		}
		
		if($value['odd'] >= $odds_suggested)
			echo $prelink . '<span class="stand">' . $value['bookmakername'] . " : " . $value['odd'] . '</span>' . $postlink . ' | ' ;
		else
			echo $prelink . $value['bookmakername'] . " : " . $value['odd']  . $postlink . ' | ';
			
	}	
	
	// Container
	if(count($obj)>0 && ($is_bet_valid && $is_user_valid))
		echo "<div class='containerforsimbet'></div>";
}

// Function to validate if this user is able to make a bet
function simbet_user_isvalid(&$message='')
{
	// ToDo : Change validation to permission again, check permission to bet if is a member but no rol
	if(!user_access('make a simulated bet'))
	{
		$message = 
			t('You need to be a member to bet, please consider <a href="/en/be-member">be a member</a> and enjoy all the fun all the time');
		return false;
	} 
	
	return true;
}

// Function to validate if this bet is posible
function simbet_bet_isvalid($matchid, $odds, $bookmakername,  $teamid, &$message='')
{
	$match = node_load($matchid);
	$match_date = new DateTime($match->field_match_date[LANGUAGE_NONE][0]['value'],new DateTimeZone('UTC'));
	
	$now = new DateTime('now',new DateTimeZone('UTC'));
	$now = $now->modify('+10 minutes'); 
	if($now >= $match_date)
	{
		$message = t('This game is already started');
		return false;	
	}
	
	// ToDo : Check if the odds sugested are valid, security with not friendly calls
	// ToDo : If is a team bet validate, for bets with team included, security with not friendly calls
	
	return true;
}

function simbet_bet_isvalid_in_confirmation($matchid, $odds, $bookmakername,  $teamid, $tiptypeid, &$message='')
{
	global $user;
	$user = user_load($user->uid);
	
	// ToDo : Slow it down baby, avoid abuse with multiple simulate bets
	// One bet by ?

	if(user_access('make only n simulated bet'))
	{
		
		if(_simbet_getcount_bets_by_user_last24h($user) >= N_BETS_BY_DAY)
		{
			$message = t('You only can make @numbetbyday bet by day, please consider <a href="/en/be-member">be a member</a> and enjoy all the fun all the time', array('@numbetbyday' => N_BETS_BY_DAY));
			return false;
		}
	}
		
	if(_simbet_bet_alredy_exists($user, $matchid, $teamid, $tiptypeid))
	{
		$message = t('You already made this bet');
		return false;
	}
	
	return true;
	
}

function _simbet_bet_alredy_exists($user, $matchid, $teamid, $tiptypeid)
{
	
	$query = new EntityFieldQuery();
	$query->entityCondition('entity_type', 'node')
		  ->entityCondition('bundle', 'simbet')
		  ->addMetaData('account', user_load(1))
		  ->fieldCondition('field_tip_type_simbet', 'target_id', $tiptypeid, '=')
		  ->fieldCondition('field_match_simbet', 'target_id', $matchid, '=')
		  ->fieldCondition('field_team_simbet', 'target_id', $teamid, '=')
		  ->propertyCondition('uid', $user->uid);
    
	return ($query->count()->execute() >= 1);
	
}

function _simbet_getcount_bets_by_user_last24h($user)
{
	
	$from = new DateTime();
	$from = $from->modify('-24 hours'); 
	
	$now = new DateTime();
	
	$query = new EntityFieldQuery();
	$query->entityCondition('entity_type', 'node')
		  ->entityCondition('bundle', 'simbet')
		  ->addMetaData('account', user_load(1))
		  ->propertyCondition('created', $from->getTimestamp(), '>=')
		  ->propertyCondition('created', $now->getTimestamp(), '<=')
		  ->propertyCondition('uid', $user->uid);
	
	return $query->count()->execute();
	
	
}
