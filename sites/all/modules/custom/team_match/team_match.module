<?PHP

/**
 * Implements hook_init().
 */
function team_match_init() {
	module_load_include('inc', 'tips', 'tips_buffer');
	global $language;
	global $user;
	
	$node = menu_get_object();
	if (isset($node->type))
		if ($node->type == 'match') {
			drupal_add_js(drupal_get_path('module', 'team_match') . '/js/team_match.js', array('scope' => 'footer'));
		    drupal_add_css(drupal_get_path('module', 'team_match') . '/css/team_match.css', array('weight' => 10));
		    
		    team_match_addmeta('twitter:card', 'summary', 'meta_twitter_card');
			team_match_addmeta('twitter:site', t('@soccer_labsen'), 'meta_twitter_site');
			team_match_addmeta('twitter:title', 'Soccer Labs', 'meta_twitter_title');
			team_match_addmeta('twitter:description', t('Soccer Labs is a portal that provides statistical information to predict results of soccer games'), 'meta_twitter_description');
			team_match_addmeta('twitter:image', 'https://soccer-labs.com/sites/all/themes/sevenmag/images/soccerlabsball.png', 'meta_twitter_image');
		    
		    
		    $url = url('node/' . $node->nid, 
				array('base_url' => 'https://soccer-labs.com/' . $language->language, 
						'absolute' => true,
						'query' => array(),
						'language' => (object)array(
							  'language' => $language->language,
							)
						));
			
			if($language->language=='es')
				$tweet = getMsgTextES($node,$oldtexts,true);
			else
				$tweet = getMsgTextEN($node,$oldtexts,true);
				
			team_match_addmeta('og:url', $url, 'meta_og_url');
		    team_match_addmeta('og:type', 'article', 'meta_og_type');
		    team_match_addmeta('og:title', $tweet, 'meta_og_title');
		    team_match_addmeta('og:description', t('Soccer Labs is a portal that provides statistical information to predict results of soccer games'), 'meta_og_description');
		    team_match_addmeta('og:image', 'http://soccer-labs.com/sites/all/themes/sevenmag/images/soccerlabsball.png', 'meta_og_image');

		}
}


function team_match_addmeta($name, $content, $id)
{
	$meta_to_add = array(
		'#type' => 'html_tag',
		'#tag' => 'meta',
		'#attributes' => array(
		  'name' =>  $name,
		  'content' => $content,
		)
	);
	drupal_add_html_head($meta_to_add, $id);	
}	
	
/**
 * Implements hook_block_info().
 */
function team_match_block_info() {
  $blocks = array();
  $blocks['team_block_stats'] = array('info' => t('Stats in team (5 matches)'), );
  $blocks['match_block_stats'] = array('info' => t('Stats in match (5 matches)'), );
  $blocks['match_block_stats_lv'] = array('info' => t('Stats in match LV (5 matches)'), );
  $blocks['team_block_standings'] = array('info' => t('Standings in team (5 matches)'), );
  $blocks['match_block_standings'] = array('info' => t('Standings in match (5 matches)'), );
  
  $blocks['match_block_quickbet'] = array('info' => t('Simulate bet'), );
  
  $blocks['match_block_last5_games'] = array('info' => t('Last 5 games in match'), );
  $blocks['match_block_last5_games_lv'] = array('info' => t('Last 5 games L/V in match'), );
  
  $blocks['match_block_inplaystats'] = array('info' => t('Game stats'), );
  
  $blocks['team_tips'] = array('info' => t('Tips in team'), );
  $blocks['match_tips'] = array('info' => t('Tips in match'), );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function team_match_block_view($delta='') {
  $block = array();
  switch($delta) {
    case 'team_block_stats' :
      $block['subject'] = t('Last 5 games stats for this team');
      $block['content'] = team_block_stats();
      break;
    case 'match_block_stats' :
      $block['subject'] = t('Last 5 games stats previous this game');
      $block['content'] = match_block_stats();
      break;
    case 'match_block_stats_lv' :
      $block['subject'] = t('Last 5 games stats previous this game (L/V)');
      $block['content'] = match_block_stats_lv();
      break;  
    case 'team_block_standings' :
      $block['subject'] = t('Standings in team (5 matches)');
      $block['content'] = team_block_standings();
      break;
    case 'match_block_standings' :
      $block['subject'] = t('Standings in match (5 matches)');
      $block['content'] = match_block_standings();
      break;
    case 'match_block_inplaystats' :
      $block['subject'] = t('Stats during the game');
      $block['content'] = match_block_inplaystats();
      break;  
    case 'match_block_quickbet' :
      $block['subject'] = t('Simulate bet');
      $block['content'] = match_block_quickbet_view();
      break;
    case 'match_block_last5_games' :
      $block['subject'] = t('Last 5 games');
      $block['content'] = match_block_last5_games();
      break;
    case 'match_block_last5_games_lv' :
      $block['subject'] = t('Last 5 games (L/V)');
      $block['content'] = match_block_last5_games_lv();
      break;
          
    case 'team_tips' :
      $block['subject'] = t('Tips in team');
      $block['content'] = team_tips();
      break;
    case 'match_tips' :
      $block['subject'] = t('Tips in match');
      $block['content'] = match_tips();
      break;
  } 
  return $block;
}

function team_block_stats()
{
	module_load_include('inc', 'commentaries', 'commentaries_strategies');
	
	$block = '';
	
	if(is_numeric(arg(1)))
		$block .= commentaries_teamstats_overview(arg(1), array(5) );
	
	return $block;
}

function match_block_stats()
{
	if(inplay_is_anonymus()) return '';
	
	global $language;
	module_load_include('inc', 'commentaries', 'commentaries_strategies');
	
	$block = '';
	
	if(is_numeric(arg(1)))
	{
		//if ($cache = cache_get('commentaries_matchstats_overview_' . $language->language . '_' . arg(1) . '_' . array(5), 'cache_block')) {
		//  	$block = $cache->data;
		//}
		//else 
		//{
			$block .= commentaries_matchstats_overview(arg(1), array(5) );
			//cache_set('commentaries_matchstats_overview_' . $language->language . '_' . arg(1) . '_' . array(5), $block, 'cache_block', time() + 60*60*48);
		//}
		
		
	}
	return $block;
}

function match_block_stats_lv()
{
	if(inplay_is_anonymus()) return '';
	
	global $language;
	module_load_include('inc', 'commentaries', 'commentaries_strategies');
	
	$block = '';
	
	if(is_numeric(arg(1)))
	{
		//if ($cache = cache_get('commentaries_matchstats_overview_lv_' . $language->language . '_' . arg(1) . '_' . array(5), 'cache_block')) {
		//  	$block = $cache->data;
		//}
		//else 
		//{
			$block .= commentaries_matchstats_overview_lv(arg(1), array(5) );
		//	cache_set('commentaries_matchstats_overview_lv_' . $language->language . '_' . arg(1) . '_' . array(5), $block, 'cache_block', time() + 60*60*48);
		//}
		
		
	}
	
	return $block;
}


function match_block_inplaystats()
{
	if(inplay_is_anonymus()) return '';
	
	module_load_include('inc', 'commentaries', 'commentaries_strategies');
	
	$block = '';
	
	if(is_numeric(arg(1)))
		$block .= commentaries_matchstats_inplay_overview(arg(1) );
	
	return $block;	
}

function match_block_quickbet_view()
{
	
	$block = '';
	// Social Changes : Todos pueden apostar mientras esten registrados
	//if(inplay_is_member())
	if(is_numeric(arg(1)))
		if(inplay_is_quickview_available(arg(1)))
		{
			$url =  url("simulate_bet", array('query' => array('as_iframe' => 1, 'field_match_simbet' => arg(1))));
			$link = '<iframe src="' . $url . '" 
								style="width: 100%; height: 350px;"></iframe>';
			$block = $link;
		}
	
	return $block;
}

function match_block_last5_games()
{
	module_load_include('inc', 'commentaries', 'commentaries_strategies');
	
	$block = '';
	
	if(is_numeric(arg(1)))
		$block .= commentaries_teamlast5_games_noblock();
	
	return $block;
}

function match_block_last5_games_lv()
{
	module_load_include('inc', 'commentaries', 'commentaries_strategies');
	
	$block = '';
	
	if(is_numeric(arg(1)))
		$block .= commentaries_teamlast5_games_lv_noblock();
	
	return $block;	
}

function team_block_standings()
{
	return "";
}

function match_block_standings()
{
	return "";
}

function team_tips()
{
	return "";	
}

function match_tips()
{
	return "";
}



function team_match_node_presave($node) 
{
	if($node->type == 'team_segment')
	{
		if(!isset($node->field_new_team['und'][0]['target_id']))
		{
			// New team
			$name = $node->title;
			$tipginapi_id = $node->field_tipginapi_id['und'][0]['value'];
			$cps = array();
			foreach($node->field_competition['und'] as $item)
				$cps[] = $item['target_id'];
			
			$new_team = _tipgin_api_feed_create_team_byargs($name, $tipginapi_id, $cps);
			$node->field_new_team['und'][0]['target_id'] = $new_team->nid;
			
			// Change matchs nid
			// For Local
			$query = new EntityFieldQuery();
			$query->entityCondition('entity_type', 'node')
				  ->entityCondition('bundle', 'match')
				  ->addMetaData('account', user_load(1))
				  ->fieldCondition('field_local_team', 'target_id', $node->field_team['und'][0]['target_id'], '=')
				  ->fieldCondition('field_competition', 'target_id', $cps, 'IN');	
		
			$result = $query->execute();
			if (isset($result['node'])) 
			{
				$match_ids = array_keys($result['node']);
				$match_items = entity_load('node', $match_ids);
				foreach($match_items as $match)
				{
					$match->field_local_team['und'][0]['target_id'] = $new_team->nid;
					node_save($match);
				}
			}
			
			// For Visitor
			$query = new EntityFieldQuery();
			$query->entityCondition('entity_type', 'node')
				  ->entityCondition('bundle', 'match')
				  ->addMetaData('account', user_load(1))
				  ->fieldCondition('field_visitor_team', 'target_id', $node->field_team['und'][0]['target_id'], '=')
				  ->fieldCondition('field_competition', 'target_id', $cps, 'IN');	
		
			$result = $query->execute();
			if (isset($result['node'])) 
			{
				$match_ids = array_keys($result['node']);
				$match_items = entity_load('node', $match_ids);
				foreach($match_items as $match)
				{
					$match->field_visitor_team['und'][0]['target_id'] = $new_team->nid;
					node_save($match);
				}
			}
			
			drupal_set_message(t('Your team segment had been applied and you have a new team.'), 'status');
		}
	}
		// Toma el/los de el equipo anterior y busca los juegos que  coincidan con las competiciones  indicadas, 
		// en caso que esea coincidente se le asigna el nuevo equipo
	
	
}