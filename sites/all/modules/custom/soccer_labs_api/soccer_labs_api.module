<?php
function soccer_labs_api_libraries_info() {
	$libraries['testclassifier'] = array(
		'name' => 'Test Classifier',
		'vendor url' => 'http://www.monkeylearn.com/',
		'download url' => 'http://www.monkeylearn.com/',
		'version' => 1.0, 
		'files' => array(
		  'php' => array('autoload.php'),
		),
	);
	return $libraries;
}



function soccer_labs_api_permission() {
  return array(
    'use api for extract info' => array(
      'title' => t('Use API to extract info'),
      'description' => t('Use API to get info '),
    ),
  );
}

/**
 * Implements hook_ctools_plugin_api().
 */
function soccer_labs_apictools_plugin_api($owner, $api) {
  if ($owner == 'services' && $api == 'services') {
    return array(
      'version' => 3,
      'file' => 'soccer_labs_api.services.inc'
    );
  }
}

function soccer_labs_api_get_competitions() 
{
	$query = new EntityFieldQuery();
	$query->entityCondition('entity_type', 'node')
		  ->entityCondition('bundle', 'competition')
		  ->fieldCondition('field_fetch_information', 'value', '1', '=')
		  ->addMetaData('account', user_load(1));
	
	$result = $query->execute();
	
	$return = array();
	if (isset($result['node'])) 
		foreach(array_keys($result['node']) as $id)
		{
			$node = node_load($id);		
			$obj = array();
			$obj['nid'] = $node->nid;
			$obj['title'] = $node->title;
			$return[] = $obj;				
		}
	
	return $return;
}


function soccer_labs_api_get_teams()
{
	$limit = (isset($_POST['limit'])) ? $_POST['limit'] : 200;
	$query = new EntityFieldQuery();
	$query->entityCondition('entity_type', 'node')
		  ->entityCondition('bundle', 'team')
		  ->addMetaData('account', user_load(1))
		  ->range(0, $limit);
		  
	
	if(isset($_POST['competition']))
		$query->fieldCondition('field_competition', 'target_id', $_POST['competition']);
	
	if(isset($_POST['team']))
		$query->propertyCondition('nid', $_POST['team']);
		
	$result = $query->execute();
	
	$return = array();
	if (isset($result['node'])) 
		foreach(array_keys($result['node']) as $id)
		{
			$node = node_load($id);		
			$obj = array();
			$obj['nid'] = $node->nid;
			$obj['title'] = $node->title;
			$obj['image'] = (isset($node->field_image[LANGUAGE_NONE][0]['uri']) ? 
								file_create_url($node->field_image[LANGUAGE_NONE][0]['uri']) : '' ) ;
			$obj['imagethumbnail'] = (isset($node->field_image[LANGUAGE_NONE][0]['uri']) ? 
								file_create_url(image_style_url('team_thumbnail-copy', $node->field_image[LANGUAGE_NONE][0]['uri'])) : '' ) ;
			$return[] = $obj;				
		}
	
	return $return;
}

function soccer_labs_api_get_games() {
	
	module_load_include('inc', 'commentaries', 'commentaries_strategies');
	
	$limit = (isset($_POST['limit'])) ? $_POST['limit'] : 100;
	$query = new EntityFieldQuery();
	$query->entityCondition('entity_type', 'node')
		  ->entityCondition('bundle', 'match')
		  ->addMetaData('account', user_load(1))
		  ->range(0, $limit)
		  ->fieldOrderBy('field_match_date','value','DESC');
		  
	
	if(isset($_POST['competition']))
		$query->fieldCondition('field_competition', 'target_id', $_POST['competition']);
	
	if(isset($_POST['local_team']))
		$query->fieldCondition('field_local_team', 'target_id',  $_POST['local_team']);
	
	if(isset($_POST['visitor_team']))
		$query->fieldCondition('field_visitor_team', 'target_id',  $_POST['visitor_team']);
	
	if(isset($_POST['from_match_date']))
		$query->fieldCondition('field_match_date', 'value', $_POST['from_match_date'], '>=');
	
	if(isset($_POST['to_match_date']))	
		$query->fieldCondition('field_match_date', 'value', $_POST['to_match_date'], '<=');
		
	if(isset($_POST['bring_big_leagues']))
		$query->fieldCondition('field_competition', 'target_id', variable_get('inplay_competitions_default', ''), 'IN');
	
	if(isset($_POST['bring_big_leagues_mexico']))
	{
		$big_leagues = variable_get('inplay_competitions_default', '');
		$big_leagues[] = 2609;
		$big_leagues[] = 2169;
		$query->fieldCondition('field_competition', 'target_id', $big_leagues, 'IN');
	}		
	if(isset($_POST['in_progress']))
	{
		$query->fieldCondition('field_available_live_score', 'value', '1', '=');
		$query->fieldCondition('field_match_status', 'value', 'FT', '<>');
		$query->fieldCondition('field_match_status', 'value', 'Postp.', '<>');
		

		$from = new DateTime('now',new DateTimeZone('UTC'));
		$from = $from->modify('-140 minutes');
		
		$to = new DateTime('now', new DateTimeZone('UTC'));
		$to = $to->modify('+5 minutes');
		
		
		$query->fieldCondition('field_match_date', 'value', $from->format('Y-m-d H:i:s'), '>=');
		$query->fieldCondition('field_match_date', 'value', $to->format('Y-m-d H:i:s'), '<=');

	}	
		
	
		
		
		
	$result = $query->execute();
	
	$return = array();
	if (isset($result['node'])) 
		foreach(array_keys($result['node']) as $id)
		{
			$node = node_load($id);		
			$obj = array();
			$obj['nid'] = $node->nid;
			
			$obj['match_date'] = $node->field_match_date[LANGUAGE_NONE][0];
			$date = new DateTime($obj['match_date']['value'], new DateTimeZone($obj['match_date']['timezone_db']));
			$date->setTimeZone(new DateTimeZone('America/Mexico_City'));
			$obj['match_date']['formatted_value'] = $date->format('j M');
			$obj['match_date']['time_formatted_value'] = $date->format('H:i');
			$obj['match_status'] = $node->field_match_status[LANGUAGE_NONE][0]['value'];
			
			if(isset($node->field_competition[LANGUAGE_NONE][0]['target_id']))
			{
				$nodecompetition = node_load($node->field_competition[LANGUAGE_NONE][0]['target_id']);	
				$obj['competition']['nid'] = $nodecompetition->nid;
				$obj['competition']['title'] = $nodecompetition->title;
			}
			
			if(isset($node->field_local_team[LANGUAGE_NONE][0]['target_id']))
			{
				$nodeteam = node_load($node->field_local_team[LANGUAGE_NONE][0]['target_id']);	
				$obj['local_team']['nid'] = $nodeteam->nid;
				$obj['local_team']['title'] = $nodeteam->title;
				$obj['local_team']['score'] = $node->field_local_team_score[LANGUAGE_NONE][0]['value'];
				$obj['local_team']['image'] = (isset($nodeteam->field_image[LANGUAGE_NONE][0]['uri']) ? 
								file_create_url($nodeteam->field_image[LANGUAGE_NONE][0]['uri']) : '' ) ;
				$obj['local_team']['imagethumbnail'] = (isset($nodeteam->field_image[LANGUAGE_NONE][0]['uri']) ? 
								file_create_url(image_style_url('team_thumbnail-copy', $nodeteam->field_image[LANGUAGE_NONE][0]['uri'])) : '' ) ;
			}
			
			if(isset($node->field_visitor_team[LANGUAGE_NONE][0]['target_id']))
			{
				$nodeteam = node_load($node->field_visitor_team[LANGUAGE_NONE][0]['target_id']);	
				$obj['visitor_team']['nid'] = $nodeteam->nid;
				$obj['visitor_team']['title'] = $nodeteam->title;
				$obj['visitor_team']['score'] = $node->field_visitor_team_score[LANGUAGE_NONE][0]['value'];
				$obj['visitor_team']['image'] = (isset($nodeteam->field_image[LANGUAGE_NONE][0]['uri']) ? 
								file_create_url($nodeteam->field_image[LANGUAGE_NONE][0]['uri']) : '' ) ;
				$obj['visitor_team']['imagethumbnail'] = (isset($nodeteam->field_image[LANGUAGE_NONE][0]['uri']) ? 
								file_create_url(image_style_url('team_thumbnail-copy', $nodeteam->field_image[LANGUAGE_NONE][0]['uri'])) : '' ) ;
			}
			
			$stats = commentaries_inplaytips_getStats($node);
			$obj['stats'] = ( $stats ? $stats : array() );
			
			$cards = commentaries_inplaytips_getCards($node);
			$obj['cards'] = ( $cards ? $cards : array() );
			
			$goals = commentaries_inplaytips_getGoals($node);
			$obj['goals'] = ( $goals ? $goals : array() );
			
			
			$return[] = $obj;				
		}
	
	return $return;
}


function soccer_labs_api_upcoming_game(){
	if(!isset($_POST['team'])){
		return;
	}
	
	$team = $_POST['team'];
	$query = new EntityFieldQuery();
	$query->entityCondition('entity_type', 'node')
		 ->entityCondition('bundle', 'team')
		 ->propertyCondition('title', "%".$team."%","LIKE")
		->addMetaData('account', user_load(1))
		->range(0, 1);
	$teams = $query->execute();
	
	if(isset($teams['node'])){
		$teams = array_keys($teams['node']);
		$team_id = $teams[0];
		
		$game_1 = _get_match($team_id , 'local' , '>=');
		$game_2 = _get_match($team_id , 'visitor' , '>=');
		
		if($game_1 != false && $game_2 == false){
			return $game_1;
		}elseif($game_1 == false && $game_2 != false){
			return $game_2;
		}elseif($game_1 != false && $game_2 != false){
			$dates_1 = field_get_items('node', node_load($game_1['nid']), 'field_match_date');
			$date_1 = $dates_1[0]['value'];
			$dates_2= field_get_items('node', node_load($game_2['nid']), 'field_match_date');
			$date_2 = $dates_2[0]['value'];
			return $date_1 < $date_2 ? $game_1 : $game_2;
		}
		return false;
	}else{
		return false;
	}
	
}

function soccer_labs_api_recent_game(){
	if(!isset($_POST['team'])){
		return;
	}
	
	$team = $_POST['team'];
	$query = new EntityFieldQuery();
	$query->entityCondition('entity_type', 'node')
		 ->entityCondition('bundle', 'team')
		 ->propertyCondition('title', "%".$team."%","LIKE")
		->addMetaData('account', user_load(1))
		->range(0, 1);
	$teams = $query->execute();
	if(isset($teams['node'])){
		$teams = array_keys($teams['node']);
		$team_id = $teams[0];
		
		$game_1 = _get_match($team_id , 'local' , '<=');
		$game_2 = _get_match($team_id , 'visitor' , '<=');
		return $game_2;
		if($game_1 != false && $game_2 == false){
			return $game_1;
		}elseif($game_1 == false && $game_2 != false){
			return $game_2;
		}elseif($game_1 != false && $game_2 != false){
			$dates_1 = field_get_items('node', node_load($game_1['nid']), 'field_match_date');
			$date_1 = $dates_1[0]['value'];
			$dates_2= field_get_items('node', node_load($game_2['nid']), 'field_match_date');
			$date_2 = $dates_2[0]['value'];
			return $date_1 > $date_2 ? $game_1 : $game_2;
		}
		return false;
	}else{
		return false;
	}
}

function soccer_labs_api_get_answer_bot(){
	if( !isset($_POST['mention']) ){
		return false;
	}
	
	if (($library = libraries_detect('testclassifier')) && !empty($library['installed'])) {
		libraries_load('testclassifier');
		
		$ml = new MonkeyLearn\Client('6f783f4985a739f54c028b1e2bb975f8322ad38a');
		$text_list = array($_POST['mention']);
		$module_id = 'cl_hqNxVmTU';
		
		$res = $ml->classifiers->classify($module_id, $text_list , true);
		
		$type = $res[0][0]['label'];
		
		if( $type == "previous" || $type == "upcoming" )
		{
			$module_id = 'cl_sbv6FQvb';
			$res = $ml->classifiers->classify($module_id, $text_list, true);
			
			if( (($res[0][0]['probability'] * 0.5) + ($res[0][1]['probability'] * 0.5)) > 0.4){
				
				$_POST['team'] = $res[0][1]['label'];
				switch($type)
				{
					case 'previous':
						$game = soccer_labs_api_recent_game();
						if(!$game)
							return random_answer('gamenotfound');	
						else
							return random_answer('previous', $game);
					break;
					case 'upcoming':
						$game = soccer_labs_api_recent_game();
						if(!$game)
							return random_answer('gamenotfound');	
						else
							return random_answer('upcoming', $game);
					break;
					default:
						return random_answer('less');
					break;
				}
				
/*
				$response = drupal_http_request("https://soccer-labs.com/en/api/slb/".$method_to_use."?api-key=testkey", array(
					'data' => $data,
					'method' => 'POST',
					'headers' => array('Content-Type' => 'application/x-www-form-urlencoded'),
				));
				
				$game = json_decode($response->data);
				return $response;
				if(!isset($response->error)){
					//probability is greater than 50%, use an answer from frist array of answers
					if( !$game[0] ){
						
						return random_answer('gamenotfound');
					}
					return 'noo';
					return random_answer('less', $game);
				}else{
					return $response->error;
				}
*/
			}
			else
			{
				//probability is less than 50%, use 2nd array of answers
				return random_answer('less');
			}
			
			
		}
		
	}
	else {
		// Something went wrong. :(
		// This contains a short status code of what went wrong, such as 'not found'.
		$error = $library['error'];
		// This contains a detailed (localized) error message.
		$error_message = $library['error message'];
		return $error_message;
	}
}

//helper functions

//returns a ramdom answer
function random_answer($case , $match = null){
	switch($case){
		case 'less':
		//probability less than 50%, don't use $match
		$answers = array(
			"No te entiendo ", 
		    "¿Podrías repetirlo? ", 
		    "No sé a qué te refieres ", 
		    "No he logrado encontrar a ese equipo ", 
		    "No lo encuentro, intenta de nuevo ", 
		    "¿Podrías intentarlo de nuevo? No lo encuentro ", 
		    "Ahora no tengo disponible ese equipo ", 
		);
		return $answers[rand ( 0 , count($answers) - 1 )];
		
		break;
		case 'upcoming':
		//probability more than 50%
		$answers = array(
		    "El siguiente partido es contra ". $match['match_date']['value'], 
		    "Se enfrentarán a ". $match['match_date']['value'], 
		    "Jugaran contra el ". $match['match_date']['value'], 
		    "Se medirán vs :". $match['match_date']['value'], 
		    "La próxima jornada será contra :". $match['match_date']['value'], 
		    "El siguiente juego de ellos es contra:". $match['match_date']['value'], 
		    "Se verán las caras frente a :". $match['match_date']['value'], 
		);
		return $answers[rand ( 0 , count($answers) - 1 )];
		
		
		break;
		case 'previous':
		//probability more than 50%
		$answers = array(
			"Jugaron contra ". $match['match_date']['value'], 
			"El último partido fue frente a ". $match['match_date']['value'], 
			"El partido pasado fue vs ". $match['match_date']['value'], 
			"La jornada anterior jugó contra ". $match['match_date']['value'], 
			"En el partido pasado jugaron vs ". $match['match_date']['value'], 
			"Se enfrentaron al ". $match['match_date']['value'], 
			"Fue la jornada pasada frente al ". $match['match_date']['value'], 
		);
		return $answers[rand ( 0 , count($answers) - 1 )];
		
		
		break;
		case 'gamenotfound':
		//no match found
		$answers = array(
			"Lo siento, no tengo ese partido", 
			"No he podido encontrar ese juego", 
			"No halle el partido que mencionaste", 
			"El juego que solicitas no está disponible", 
			"No pude encontrarlo", 
			"Ese partido no está ahora disponible", 
			"Aún no tengo ese juego, intenta más tarde", 
		);
		return $answers[rand ( 0 , count($answers) - 1 )];
		
		
		break;
	}
}

//team_type = local / visitor
//date_operator = >= / <=
function _get_match($team_id , $team_type , $date_operator = '>='){
	module_load_include('inc', 'commentaries', 'commentaries_strategies');
	$team_type = $team_type == 'local' ? 'field_local_team' : 'field_visitor_team';
	//return $team_id;
	$query = new EntityFieldQuery();
	$query->entityCondition('entity_type', 'node')
		  ->entityCondition('bundle', 'match')
		  ->addMetaData('account', user_load(1))
		  ->fieldCondition($team_type, 'target_id', $team_id)
		  ->range(0, 1)
		  ->fieldOrderBy('field_match_date','value','DESC');
	if(isset($_POST['competition']) && is_array($_POST['competition']) )
	{
		$leagues = $_POST['competition'];
	}else{
		$leagues = array(1365 , 1446, 2362, 1806, 2124, 1972, 1925,2169, 10404, 11780, 2510);
	}		
	$query->fieldCondition('field_competition', 'target_id', $leagues, 'IN');
	//get only future games
	$from = new DateTime('now',new DateTimeZone('America/Yellowknife'));
	$query->fieldCondition('field_match_date', 'value', $from->format('Y-m-d H:i:s'), $date_operator);
	$result = $query->execute();
	if(isset($result['node'])){
		$games = array_keys($result['node']);
		$node = node_load($games[0]);
		$obj = array();
		$obj['nid'] = $node->nid;
			
		$obj['match_date'] = $node->field_match_date[LANGUAGE_NONE][0];
		$date = new DateTime($obj['match_date']['value'], new DateTimeZone($obj['match_date']['timezone_db']));
		$date->setTimeZone(new DateTimeZone('America/Mexico_City'));
		$obj['match_date']['formatted_value'] = $date->format('j M');
		$obj['match_date']['time_formatted_value'] = $date->format('H:i');
		$obj['match_status'] = $node->field_match_status[LANGUAGE_NONE][0]['value'];
			
		if(isset($node->field_competition[LANGUAGE_NONE][0]['target_id']))
		{
			$nodecompetition = node_load($node->field_competition[LANGUAGE_NONE][0]['target_id']);	
			$obj['competition']['nid'] = $nodecompetition->nid;
			$obj['competition']['title'] = $nodecompetition->title;
		}
			
		if(isset($node->field_local_team[LANGUAGE_NONE][0]['target_id']))
		{
			$nodeteam = node_load($node->field_local_team[LANGUAGE_NONE][0]['target_id']);	
			$obj['local_team']['nid'] = $nodeteam->nid;
			$obj['local_team']['title'] = $nodeteam->title;
			$obj['local_team']['score'] = $node->field_local_team_score[LANGUAGE_NONE][0]['value'];
			$obj['local_team']['image'] = (isset($nodeteam->field_image[LANGUAGE_NONE][0]['uri']) ? 
								file_create_url($nodeteam->field_image[LANGUAGE_NONE][0]['uri']) : '' ) ;
			$obj['local_team']['imagethumbnail'] = (isset($nodeteam->field_image[LANGUAGE_NONE][0]['uri']) ? 
								file_create_url(image_style_url('team_thumbnail-copy', $nodeteam->field_image[LANGUAGE_NONE][0]['uri'])) : '' ) ;
		}
			
		if(isset($node->field_visitor_team[LANGUAGE_NONE][0]['target_id']))
		{
			$nodeteam = node_load($node->field_visitor_team[LANGUAGE_NONE][0]['target_id']);	
			$obj['visitor_team']['nid'] = $nodeteam->nid;
			$obj['visitor_team']['title'] = $nodeteam->title;
			$obj['visitor_team']['score'] = $node->field_visitor_team_score[LANGUAGE_NONE][0]['value'];
			$obj['visitor_team']['image'] = (isset($nodeteam->field_image[LANGUAGE_NONE][0]['uri']) ? 
								file_create_url($nodeteam->field_image[LANGUAGE_NONE][0]['uri']) : '' ) ;
			$obj['visitor_team']['imagethumbnail'] = (isset($nodeteam->field_image[LANGUAGE_NONE][0]['uri']) ? 
								file_create_url(image_style_url('team_thumbnail-copy', $nodeteam->field_image[LANGUAGE_NONE][0]['uri'])) : '' ) ;
		}
			
		$stats = commentaries_inplaytips_getStats($node);
		$obj['stats'] = ( $stats ? $stats : array() );
			
		$cards = commentaries_inplaytips_getCards($node);
		$obj['cards'] = ( $cards ? $cards : array() );
			
		$goals = commentaries_inplaytips_getGoals($node);
		$obj['goals'] = ( $goals ? $goals : array() );
			
			
		return $obj;
		
	}else{
		return false;
	}
}